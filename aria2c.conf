# Run as daemon.
daemon=true

# Dir needs to be changed to the download location.
dir=/var/share/aria2c/

# Logging
log=/var/share/aria2c/aria2c.log
log-level=warn

# save completed state
force-save=true
# Save a control file(*.aria2) every SEC seconds.
auto-save-interval=60
# Downloads URIs found in FILE.
input-file=/var/share/aria2c/aria2c.session
# Save error/unfinished downloads to FILE on exit.
save-session=/var/share/aria2c/aria2c.session
# Save error/unfinished downloads to a file every SEC seconds.
save-session-interval=60

# Initializing EpollEventPoll failed.
#event-poll=select

# Continue downloading a partially downloaded file. 
continue=true

# RPC options, user and password should be changed.
#Enable JSON-RPC/XML-RPC server.
enable-rpc=true
# Add Access-Control-Allow-Origin header field with value, for YAAW
rpc-allow-origin-all=true
# Listen incoming JSON-RPC/XML-RPC requests on all network interfaces.
rpc-listen-all=true
# Save the uploaded torrent or metalink metadata in the directory specified by --dir option
rpc-save-upload-metadata=true
# Specify a port number for JSON-RPC/XML-RPC server to listen to.
#rpc-listen-port=6800
# Set JSON-RPC/XML-RPC user.
rpc-secret=aria2c

# Advanced
# Restart download from scratch if the corresponding control file doesn't exist.
allow-overwrite=true
# Specify file allocation method. none, prealloc, trunc, falloc Default: prealloc
file-allocation=prealloc

# Set max overall download speed in bytes/sec.
max-overall-download-limit=0

# Set max overall upload speed in bytes/sec.
max-overall-upload-limit=0

# Download a file using N connections.
split=5

# The maximum number of connections to one server for each download.
max-connection-per-server=5

# Set maximum number of parallel downloads for every static (HTTP/FTP) URI,
max-concurrent-downloads=4

min-split-size=20M

# Fetch URIs in the command-line sequentially and download each URI in a separate session,
force-sequential=true

# Enable parameterized URI support. for example:
#   http://{sv1,sv2,sv3}/foo.iso
#   http://host/image[000-100:2].img
parameterized-uri=true


# HTTP
check-certificate=false

# HTTP/FTP
max-file-not-found=5
max-tries=2
remote-time=true

# Set user agent for HTTP(S) downloads
user-agent=Transmission/2.61 (13407)
#user-agent=uTorrent/2210(25130)

# BT

# Enable Local Peer Discovery.
bt-enable-lpd=true

# Set TCP port number for BitTorrent downloads.
listen-port=25000
#listen-port=6881-6999

# Specify share ratio.
seed-ratio=1.0
# Specify seeding time in minutes.
seed-time=60

# Specify the prefix of peer ID.
peer-id-prefix=-TR2610-
#peer-id-prefix=-UT2210-

# Enable IPv4 DHT functionality. fro PT
enable-dht=true
# Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker.
dht-listen-port=51414

# Set host and port as an entry point to IPv4 DHT network.
dht-entry-point=dht.transmissionbt.com:6881
#dht-entry-point6=

# Specify the maximum number of peers per torrent.
bt-max-peers=80

# Configuring this option with your preferred download speed can increase your download speed in some cases.
bt-request-peer-speed-limit=200K

# Enable Peer Exchange extension.
enable-peer-exchange=true

bt-hash-check-seed=true
bt-seed-unverified=true
bt-save-metadata=true

# If true is given, aria2 doesn't accept and establish connection with legacy BitTorrent handshake(19BitTorrent protocol). Thus aria2 always uses Obfuscation handshake.
bt-require-crypto=true

# If true or mem is specified, when a file whose suffix is .torrent or content type is application/x-bittorrent is downloaded, aria2 parses it as a torrent file and downloads files mentioned in it.
follow-torrent=true
